# -*- coding: utf-8 -*-
"""Laser Assignment-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hsdJ0--XgdLVpRoxni0RodksMrNBa7mn
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.special import kv  # Modified Bessel function K0

# Material Properties: Iron
rho = 7800               # kg/m^3
cp = 450                 # J/kg·K
k = 80                   # W/m·K
alpha = k / (rho * cp)   # m²/s
T_amb = 300              # Initial temperature (K)
T_melt = 1811            # Approx. melting point of iron (K)
T_boil = 3134            # Approx. boiling point of iron (K)

# Heat Source Characteristics
eta = 0.6               # Efficiency (Fresnel-adjusted)
q_pulse = 800           # J/m² (Fluence)
pulse_duration = 8e-8   # s
q_max = q_pulse / pulse_duration

# Laser Parameters (can be varied)
laser_power = 1000      # W
scan_speed = 0.05       # m/s

# Spatial Evaluation Settings
y_eval = 1e-3           # Evaluate 1 mm off center line
x_eval = 0              # On centerline

# Plate Thicknesses
thin_h = 0.001          # 1 mm
thick_h = 0.010         # 10 mm

# Temperature Estimation Models

def point_heat_temp(power, speed, x, y, z, k, alpha, T_base):
    heat_input = eta * power
    r = np.sqrt(x**2 + y**2 + z**2)
    r = max(r, 1e-6)  # Avoid divide-by-zero
    decay = np.exp(-speed * (r + x) / (2 * alpha))
    return T_base + (heat_input / (2 * np.pi * k * r)) * decay

def line_heat_temp(power, speed, thickness, x, y, k, alpha, T_base):
    heat_input = eta * power
    r = np.sqrt(x**2 + y**2)
    r = max(r, 1e-6)
    arg = speed * r / (2 * alpha)
    if arg > 700:  # Avoid overflow
        return T_base
    decay = np.exp(-speed * x / (2 * alpha)) * kv(0, arg)
    return T_base + (heat_input / (2 * np.pi * k * thickness)) * decay

# Max Temperature vs Plate Thickness for Both Sources

def plot_max_temp_vs_thickness():
    thicknesses = np.linspace(0.001, 0.01, 100)  # 1 mm to 10 mm
    line_temps = [line_heat_temp(laser_power, scan_speed, h, 0, 0, k, alpha, T_amb) for h in thicknesses]
    point_temps = [point_heat_temp(laser_power, scan_speed, 0, 0, h, k, alpha, T_amb) for h in thicknesses]  # max over z

    plt.figure(figsize=(10, 6))
    plt.plot(thicknesses * 1e3, point_temps, 'o-', label='Point Heat Source (Max over z)', color='blue')
    plt.plot(thicknesses * 1e3, line_temps, 'o-', label='Line Heat Source', color='orange')
    plt.axhline(T_melt, color='red', linestyle='--', label=f"Melting Point ({T_melt} K)")
    plt.axhline(T_boil, color='green', linestyle='--', label=f"Boiling Point ({T_boil} K)")
    plt.xlabel('Plate Thickness (mm)')
    plt.ylabel('Maximum Temperature (K)')
    plt.title('Maximum Temperature vs. Plate Thickness\nNd:YAG, P = 1000 W, u_x = 50 mm/s')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

# Plot Temperature Surface for Both Models

def plot_3D_profiles():
    x_range = np.linspace(-0.005, 0.005, 50)
    y_range = np.linspace(-0.005, 0.005, 50)
    X, Y = np.meshgrid(x_range, y_range)

    for h, label in zip([thin_h, thick_h], ["1 mm", "10 mm"]):
        Z_point = np.zeros_like(X)
        Z_line = np.zeros_like(X)

        for i in range(X.shape[0]):
            for j in range(X.shape[1]):
                Z_point[i, j] = point_heat_temp(laser_power, scan_speed, X[i,j], Y[i,j], 0, k, alpha, T_amb)
                Z_line[i, j] = line_heat_temp(laser_power, scan_speed, h, X[i,j], Y[i,j], k, alpha, T_amb)

        # Plot point source
        fig1 = plt.figure(figsize=(10, 8))
        ax1 = fig1.add_subplot(111, projection='3d')
        ax1.plot_surface(X * 1e3, Y * 1e3, Z_point, cmap='hot')
        ax1.set_title(f"Moving Point Source (Plate Thickness = {label})")
        ax1.set_xlabel("X (mm)")
        ax1.set_ylabel("Y (mm)")
        ax1.set_zlabel("Temp (K)")
        plt.tight_layout()
        plt.show()

        # Plot line source
        fig2 = plt.figure(figsize=(10, 8))
        ax2 = fig2.add_subplot(111, projection='3d')
        ax2.plot_surface(X * 1e3, Y * 1e3, Z_line, cmap='hot')
        ax2.set_title(f"Moving Line Source (Plate Thickness = {label})")
        ax2.set_xlabel("X (mm)")
        ax2.set_ylabel("Y (mm)")
        ax2.set_zlabel("Temp (K)")
        plt.tight_layout()
        plt.show()

# Parametric Range: Speed vs Power for Valid Region

def plot_valid_param_region():
    powers = np.linspace(500, 5000, 40)
    speeds = np.linspace(0.01, 0.1, 40)
    P_grid, V_grid = np.meshgrid(powers, speeds)

    valid_power, valid_speed, valid_temp = [], [], []

    for i in range(P_grid.shape[0]):
        for j in range(P_grid.shape[1]):
            temp = line_heat_temp(P_grid[i,j], V_grid[i,j], thin_h, x_eval, y_eval, k, alpha, T_amb)
            if T_melt <= temp <= T_boil:
                valid_power.append(P_grid[i,j])
                valid_speed.append(V_grid[i,j] * 1e3)  # mm/s
                valid_temp.append(temp)

    plt.figure(figsize=(10, 6))
    if valid_power:
        scatter = plt.scatter(valid_speed, valid_power, c=valid_temp, cmap='viridis', s=50)
        plt.colorbar(scatter, label='Temperature (K)')
        plt.xlabel('Scan Speed (mm/s)')
        plt.ylabel('Laser Power (W)')
        plt.title(f'Valid Parameter Region (T between {T_melt} K and {T_boil} K)\nPlate Thickness = 1 mm')
        plt.grid(True)
    else:
        plt.text(0.5, 0.5, "No valid parameters found", ha='center', va='center')
    plt.tight_layout()
    plt.show()

# Run All

if __name__ == "__main__":
    print("Generating max temp vs thickness graph...")
    plot_max_temp_vs_thickness()

    print("Generating 3D temperature fields...")
    plot_3D_profiles()

    print("Generating valid parameter map...")
    plot_valid_param_region()